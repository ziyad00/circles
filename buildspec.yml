version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws --version
      - ACCOUNT_URI=$(echo "$ECR_REPOSITORY_URI" | cut -d/ -f1)
      - aws ecr get-login-password --region "$AWS_DEFAULT_REGION" | docker login --username AWS --password-stdin "$ACCOUNT_URI"
      - IMAGE_TAG=${CODEBUILD_RESOLVED_SOURCE_VERSION:-latest}
      - echo Using image tag $IMAGE_TAG
      - yum -y install jq >/dev/null 2>&1 || true
  build:
    commands:
      - echo Build and push image $ECR_REPOSITORY_URI:$IMAGE_TAG
      - docker build --platform linux/amd64 -t "$ECR_REPOSITORY_URI:$IMAGE_TAG" .
      - docker push "$ECR_REPOSITORY_URI:$IMAGE_TAG"
      - docker tag "$ECR_REPOSITORY_URI:$IMAGE_TAG" "$ECR_REPOSITORY_URI:latest"
      - docker push "$ECR_REPOSITORY_URI:latest"
  post_build:
    commands:
      - echo Resolving image digest from ECR...
      - REPO_NAME=$(echo "$ECR_REPOSITORY_URI" | awk -F/ '{print $NF}')
      - IMAGE_DIGEST=$(aws ecr describe-images --repository-name "$REPO_NAME" --image-ids imageTag="$IMAGE_TAG" --query 'imageDetails[0].imageDigest' --output text --region "$AWS_DEFAULT_REGION")
      - echo Digest is $IMAGE_DIGEST
      - echo Fetching current task definition $ECS_TASK_DEFINITION
      - TD_JSON=$(aws ecs describe-task-definition --task-definition "$ECS_TASK_DEFINITION" --query 'taskDefinition' --output json)
      - echo Patching container image to $ECR_REPOSITORY_URI@$IMAGE_DIGEST
      - NEW_TD=$(echo "$TD_JSON" | jq --arg IMG "$ECR_REPOSITORY_URI@$IMAGE_DIGEST" '.containerDefinitions |= map(.image=$IMG) | del(.revision,.taskDefinitionArn,.status,.requiresAttributes,.compatibilities,.registeredAt,.registeredBy)')
      - echo Registering new task definition revision...
      - NEW_TD_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TD" --query 'taskDefinition.taskDefinitionArn' --output text)
      - echo Updating service $ECS_SERVICE_NAME on cluster $ECS_CLUSTER_NAME to $NEW_TD_ARN
      - aws ecs update-service --cluster "$ECS_CLUSTER_NAME" --service "$ECS_SERVICE_NAME" --task-definition "$NEW_TD_ARN"
      - echo Waiting for service stability...
      - echo "Service update initiated successfully. Checking service status..."
      - timeout 600 aws ecs wait services-stable --cluster "$ECS_CLUSTER_NAME" --services "$ECS_SERVICE_NAME" || echo "Service deployment may still be in progress. Check ECS console for final status."
      - echo "Build and deployment process completed."
artifacts:
  files:
    - "**/*"
  discard-paths: yes
