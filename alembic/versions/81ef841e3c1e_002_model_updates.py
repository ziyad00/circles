"""002_model_updates

Revision ID: 81ef841e3c1e
Revises: 001
Create Date: 2025-08-24 23:44:20.644762

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '81ef841e3c1e'
down_revision = '001'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_dm_participant_state_id'), table_name='dm_participant_state')
    op.drop_index(op.f('ix_dm_participant_state_thread_id'), table_name='dm_participant_state')
    op.drop_index(op.f('ix_dm_participant_state_user_id'), table_name='dm_participant_state')
    op.drop_table('dm_participant_state')
    op.drop_index(op.f('ix_friendships_id'), table_name='friendships')
    op.drop_index(op.f('ix_friendships_user_a_id'), table_name='friendships')
    op.drop_index(op.f('ix_friendships_user_b_id'), table_name='friendships')
    op.drop_table('friendships')
    op.add_column('activities', sa.Column('activity_data', sa.Text(), nullable=False))
    op.create_index(op.f('ix_activities_activity_type'), 'activities', ['activity_type'], unique=False)
    op.create_index(op.f('ix_activities_created_at'), 'activities', ['created_at'], unique=False)
    op.drop_constraint(op.f('activities_user_id_fkey'), 'activities', type_='foreignkey')
    op.create_foreign_key(None, 'activities', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('activities', 'target_type')
    op.drop_column('activities', 'metadata')
    op.drop_column('activities', 'target_id')
    op.drop_constraint(op.f('check_in_comments_user_id_fkey'), 'check_in_comments', type_='foreignkey')
    op.drop_constraint(op.f('check_in_comments_check_in_id_fkey'), 'check_in_comments', type_='foreignkey')
    op.create_foreign_key(None, 'check_in_comments', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'check_in_comments', 'check_ins', ['check_in_id'], ['id'], ondelete='CASCADE')
    op.create_unique_constraint('uq_checkin_like', 'check_in_likes', ['check_in_id', 'user_id'])
    op.drop_constraint(op.f('check_in_likes_user_id_fkey'), 'check_in_likes', type_='foreignkey')
    op.drop_constraint(op.f('check_in_likes_check_in_id_fkey'), 'check_in_likes', type_='foreignkey')
    op.create_foreign_key(None, 'check_in_likes', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'check_in_likes', 'check_ins', ['check_in_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(op.f('uq_dm_message_likes_message_user'), 'dm_message_likes', type_='unique')
    op.create_unique_constraint('uq_dm_message_like_user', 'dm_message_likes', ['message_id', 'user_id'])
    op.add_column('dm_messages', sa.Column('text', sa.Text(), nullable=False))
    op.drop_column('dm_messages', 'is_pinned')
    op.drop_column('dm_messages', 'message_type')
    op.drop_column('dm_messages', 'content')
    op.drop_column('dm_messages', 'is_archived')
    op.drop_index(op.f('ix_otp_codes_user_id'), table_name='otp_codes')
    op.alter_column('places', 'place_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_index(op.f('ix_places_osm_id'), table_name='places')
    op.drop_column('places', 'discovery_score')
    op.drop_column('places', 'discovery_photos')
    op.drop_column('places', 'discovery_rank')
    op.drop_column('places', 'discovery_hours')
    op.drop_column('places', 'osm_id')
    op.drop_column('places', 'discovery_tips')
    op.drop_column('places', 'discovery_attributes')
    op.drop_column('places', 'discovery_price_tier')
    op.drop_column('places', 'discovery_popularity')
    op.drop_column('places', 'quality_score')
    op.drop_column('places', 'discovery_rating')
    op.drop_column('places', 'discovery_categories')
    op.drop_constraint(op.f('uq_reviews_user_place'), 'reviews', type_='unique')
    op.drop_constraint(op.f('uq_saved_places_user_place'), 'saved_places', type_='unique')
    op.add_column('support_tickets', sa.Column('message', sa.Text(), nullable=False))
    op.alter_column('support_tickets', 'status',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_constraint(op.f('support_tickets_user_id_fkey'), 'support_tickets', type_='foreignkey')
    op.create_foreign_key(None, 'support_tickets', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('support_tickets', 'body')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('support_tickets', sa.Column('body', sa.TEXT(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'support_tickets', type_='foreignkey')
    op.create_foreign_key(op.f('support_tickets_user_id_fkey'), 'support_tickets', 'users', ['user_id'], ['id'])
    op.alter_column('support_tickets', 'status',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_column('support_tickets', 'message')
    op.create_unique_constraint(op.f('uq_saved_places_user_place'), 'saved_places', ['user_id', 'place_id'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('uq_reviews_user_place'), 'reviews', ['user_id', 'place_id'], postgresql_nulls_not_distinct=False)
    op.add_column('places', sa.Column('discovery_categories', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('places', sa.Column('discovery_rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('places', sa.Column('quality_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('places', sa.Column('discovery_popularity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('places', sa.Column('discovery_price_tier', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('places', sa.Column('discovery_attributes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('places', sa.Column('discovery_tips', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('places', sa.Column('osm_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('places', sa.Column('discovery_hours', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('places', sa.Column('discovery_rank', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('places', sa.Column('discovery_photos', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('places', sa.Column('discovery_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.create_index(op.f('ix_places_osm_id'), 'places', ['osm_id'], unique=True)
    op.alter_column('places', 'place_metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.create_index(op.f('ix_otp_codes_user_id'), 'otp_codes', ['user_id'], unique=False)
    op.add_column('dm_messages', sa.Column('is_archived', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('dm_messages', sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('dm_messages', sa.Column('message_type', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('dm_messages', sa.Column('is_pinned', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_column('dm_messages', 'text')
    op.drop_constraint('uq_dm_message_like_user', 'dm_message_likes', type_='unique')
    op.create_unique_constraint(op.f('uq_dm_message_likes_message_user'), 'dm_message_likes', ['message_id', 'user_id'], postgresql_nulls_not_distinct=False)
    op.drop_constraint(None, 'check_in_likes', type_='foreignkey')
    op.drop_constraint(None, 'check_in_likes', type_='foreignkey')
    op.create_foreign_key(op.f('check_in_likes_check_in_id_fkey'), 'check_in_likes', 'check_ins', ['check_in_id'], ['id'])
    op.create_foreign_key(op.f('check_in_likes_user_id_fkey'), 'check_in_likes', 'users', ['user_id'], ['id'])
    op.drop_constraint('uq_checkin_like', 'check_in_likes', type_='unique')
    op.drop_constraint(None, 'check_in_comments', type_='foreignkey')
    op.drop_constraint(None, 'check_in_comments', type_='foreignkey')
    op.create_foreign_key(op.f('check_in_comments_check_in_id_fkey'), 'check_in_comments', 'check_ins', ['check_in_id'], ['id'])
    op.create_foreign_key(op.f('check_in_comments_user_id_fkey'), 'check_in_comments', 'users', ['user_id'], ['id'])
    op.add_column('activities', sa.Column('target_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('activities', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('activities', sa.Column('target_type', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'activities', type_='foreignkey')
    op.create_foreign_key(op.f('activities_user_id_fkey'), 'activities', 'users', ['user_id'], ['id'])
    op.drop_index(op.f('ix_activities_created_at'), table_name='activities')
    op.drop_index(op.f('ix_activities_activity_type'), table_name='activities')
    op.drop_column('activities', 'activity_data')
    op.create_table('friendships',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_a_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_b_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_a_id'], ['users.id'], name=op.f('friendships_user_a_id_fkey')),
    sa.ForeignKeyConstraint(['user_b_id'], ['users.id'], name=op.f('friendships_user_b_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('friendships_pkey'))
    )
    op.create_index(op.f('ix_friendships_user_b_id'), 'friendships', ['user_b_id'], unique=False)
    op.create_index(op.f('ix_friendships_user_a_id'), 'friendships', ['user_a_id'], unique=False)
    op.create_index(op.f('ix_friendships_id'), 'friendships', ['id'], unique=False)
    op.create_table('dm_participant_state',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('thread_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_typing', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('typing_until', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_read_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_blocked', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['thread_id'], ['dm_threads.id'], name=op.f('dm_participant_state_thread_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('dm_participant_state_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('dm_participant_state_pkey'))
    )
    op.create_index(op.f('ix_dm_participant_state_user_id'), 'dm_participant_state', ['user_id'], unique=False)
    op.create_index(op.f('ix_dm_participant_state_thread_id'), 'dm_participant_state', ['thread_id'], unique=False)
    op.create_index(op.f('ix_dm_participant_state_id'), 'dm_participant_state', ['id'], unique=False)
    # ### end Alembic commands ###
